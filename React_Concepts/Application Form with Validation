import { useState } from "react"; // Importing the useState hook to manage state in the functional component

export const App = () => {
  const initialData = {fname:"", lname:"", age:"", gender:"", state:""}; // Initial data object with empty fields
  const [data, setData] = useState(initialData); // State hook to store form data
  const [errors, setErrors] = useState({}); // State hook to store validation errors

  // Function to validate the form data
  const validation = () => {
    const validErrors = {}; // Object to store any validation errors
    if (!data.fname) validErrors.fname = 'Please fill First Name.'; // Validate First Name
    if (!data.lname) validErrors.lname = 'Please fill Last Name.'; // Validate Last Name
    if (!data.age || data.age < 18) validErrors.age = 'Please fill valid age.'; // Validate age (must be >= 18)
    if (!data.gender) validErrors.gender = 'Please select the gender.'; // Validate gender selection
    if (!data.state) validErrors.state = 'Please select the state.'; // Validate state selection
    return validErrors; // Return the errors object
  };

  // Function to handle input changes
  const handleChange = (e) => {
    setData({
      ...data, // Spread the previous state data to preserve other fields
      [e.target.name]: e.target.value, // Update the specific field based on input name and value
    });
  };

  // Function to handle form submission
  const handleSubmit = (e) => {
    e.preventDefault(); // Prevent the default form submission behavior
    const validationErrors = validation(); // Validate form data
    if (Object.keys(validationErrors).length > 0) { // Check if there are any validation errors
      setErrors(validationErrors); // Update the errors state with validation errors
    } else {
      console.log(data); // Log the form data for testing purposes
      alert("Submitted"); // Show a success message when form is submitted

      setData(initialData); // Reset form data to initial state
      setErrors({}); // Clear any previous errors
    }
  };

  return (
    <>
      <div>
        <h1>Application Form</h1> {/* Form title */}
      </div>
      <div>
        <form
          style={{
            display: 'flex',
            flexDirection: 'column',
            rowGap: '10px',
          }} // Style to organize form elements in a column layout with spacing
          onSubmit={handleSubmit} // Submit form on button click
        >
          <label>First Name:</label>
          <input
            type="text"
            name="fname"
            placeholder="First Name"
            value={data.fname} // Bind input value to form state
            onChange={handleChange} // Handle change event for input
          />
          {errors.fname && <p style={{ color: 'red' }}>{errors.fname}</p>} {/* Show validation error if exists */}
          
          <label>Last Name:</label>
          <input
            type="text"
            name="lname"
            placeholder="Last Name"
            value={data.lname} // Bind input value to form state
            onChange={handleChange} // Handle change event for input
          />
          {errors.lname && <p style={{ color: 'red' }}>{errors.lname}</p>} {/* Show validation error if exists */}
          
          <label>Age:</label>
          <input
            type="number"
            name="age"
            placeholder="Age"
            value={data.age} // Bind input value to form state
            onChange={handleChange} // Handle change event for input
          />
          {errors.age && <p style={{ color: 'red' }}>{errors.age}</p>} {/* Show validation error if exists */}
          
          <label>Gender:</label>
          <select name="gender" value={data.gender} onChange={handleChange}> {/* Dropdown for gender selection */}
            <option value="" disabled>
              Please Select Options
            </option>
            <option value="male">Male</option>
            <option value="female">Female</option>
            <option value="other">Other</option>
          </select>
          {errors.gender && <p style={{ color: 'red' }}>{errors.gender}</p>} {/* Show validation error if exists */}
          
          <label>State:</label>
          <select name="state" value={data.state} onChange={handleChange}> {/* Dropdown for state selection */}
            <option value="" disabled>
              Please Select Options
            </option>
            <option value="karnataka">Karnataka</option>
            <option value="pune">Pune</option>
            <option value="goa">Goa</option>
          </select>
          {errors.state && <p style={{ color: 'red' }}>{errors.state}</p>} {/* Show validation error if exists */}
          
          <button type="submit">Submit</button> {/* Submit button to submit the form */}
          <button
            type="button"
            onClick={() => {
              setData(initialData); // Reset the form data to initial state
              setErrors({}); // Clear any form validation errors
            }}
          >
            Reset {/* Button to reset the form */}
          </button>
        </form>
      </div>
    </>
  );
};

export default App; // Export the App component as the default export
