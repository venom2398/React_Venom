import React, { useEffect, useState } from 'react' // Importing React, useEffect, and useState for component creation and state management
import "./App.css" // Importing CSS file for styling
import axios from 'axios'; // Importing axios for making API requests

const App = () => {
  // Defining the state to store fetched data for each page and rowsPerPage combination
  const [tableData, setTableData] = useState({}); // Store data for each page
  const [currentPage, setCurrentPage] = useState(1); // State to track the current page
  const [rowsPerPage, setRowsPerPage] = useState(10); // Default to 10 rows per page
  const [totalPages, setTotalPages] = useState(0); // State to store the total number of pages

  // Function to fetch data for a specific page with the selected rowsPerPage
  const fetchData = async (page, rowsPerPage) => {
    const cacheKey = `${page}-${rowsPerPage}`; // Creating a cache key based on page and rowsPerPage

    if (tableData[cacheKey]) {
      return; // If data for the page and rowsPerPage is already fetched, do nothing
    }

    try {
      // Fetch data from the dummy API with pagination parameters
      const response = await axios.get(`https://dummyjson.com/users?limit=${rowsPerPage}&skip=${(page - 1) * rowsPerPage}`);
      setTableData(prevData => ({
        ...prevData,
        [cacheKey]: response.data.users // Save the fetched data for the current page and rowsPerPage
      }));
      setTotalPages(Math.ceil(response.data.total / rowsPerPage)); // Calculate total pages based on total data and rowsPerPage
    } catch (error) {
      console.log(error.message); // Log error if the API call fails
    }
  }

  // Fetch data when currentPage or rowsPerPage changes
  useEffect(() => {
    fetchData(currentPage, rowsPerPage); // Call fetchData every time currentPage or rowsPerPage changes
  }, [currentPage, rowsPerPage]); // useEffect dependencies: re-run when either currentPage or rowsPerPage changes

  // Handle pagination navigation to the next page
  const handleNext = () => {
    setCurrentPage(prev => Math.min(prev + 1, totalPages)); // Move to the next page, but don't exceed the totalPages
  }
  // Handle pagination navigation to the previous page
  const handlePrev = () => {
    setCurrentPage(prev => Math.max(prev - 1, 1)); // Move to the previous page, but don't go below page 1
  }

  // Handle change in rows per page
  const handleRowsPerPageChange = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10)); // Update the rowsPerPage based on user's selection
    setCurrentPage(1); // Reset to page 1 when rows per page changes
  }

  // Get the data for the current page and rows per page combination from tableData
  const currentPageItems = tableData[`${currentPage}-${rowsPerPage}`] || []; // Default to an empty array if no data is available

  return (
    <>
      <div>
        <h1>Pagination</h1> {/* Display a header */}
      </div>

      {/* Rows Per Page Selector */}
      <div className='rows-per-page'>
        <label htmlFor="rowsPerPage">Rows per page: </label> {/* Label for selecting rows per page */}
        <select id="rowsPerPage" value={rowsPerPage} onChange={handleRowsPerPageChange}> {/* Dropdown to select rows per page */}
          <option value={10}>10</option> {/* Option to show 10 rows per page */}
          <option value={25}>25</option> {/* Option to show 25 rows per page */}
          <option value={50}>50</option> {/* Option to show 50 rows per page */}
        </select>
      </div>

      {/* Display table with data */}
      <table className='table'>
        <thead>
          <tr>
            <th>Id</th> {/* Column header for User ID */}
            <th>Name</th> {/* Column header for User Name */}
            <th>Email</th> {/* Column header for User Email */}
            <th>Gender</th> {/* Column header for User Gender */}
          </tr>
        </thead>
        <tbody>
          {currentPageItems.map((items) => (
            <tr key={items?.id}> {/* Iterate over fetched data and render each row with unique key */}
              <td>{items?.id}</td> {/* Display User ID */}
              <td>{items?.firstName} {items?.lastName}</td> {/* Display User Full Name */}
              <td>{items?.email}</td> {/* Display User Email */}
              <td>{items?.gender}</td> {/* Display User Gender */}
            </tr>
          ))}
        </tbody>
      </table>

      {/* Pagination Controls */}
      <div className='pagination'>
        <button onClick={handlePrev} disabled={currentPage === 1}>Previous</button> {/* Button to go to the previous page */}
        {Array.from({ length: totalPages }, (_, index) => (
          <button key={index} onClick={() => setCurrentPage(index + 1)}> {/* Button to go to a specific page */}
            {index + 1}
          </button>
        ))}
        <button onClick={handleNext} disabled={currentPage === totalPages}>Next</button> {/* Button to go to the next page */}
      </div>
    </>
  );
}

export default App;
