**useReducer** is a hook that helps manage complex state logic in components. 
Itâ€™s similar to useState, but it's useful when you have multiple related state variables or complex state transitions. 
Instead of updating state directly, useReducer uses a function (called a "reducer") that takes the current state and an action, 
then returns the new state based on that action.

1) Example: - here we increment and decrement the value using the reducer
import React, { useReducer } from 'react' // Importing React and the useReducer hook from the 'react' library

const inintialState = {count: 0} // Defining the initial state object with a count property set to 0

const reducer = (state, action) =>{ // Defining the reducer function that takes the current state and an action as arguments
  switch(action.type){ // Using a switch statement to handle different action types
    case "inc": return{ // If the action type is "inc", return a new state object with count incremented by 1
      count : state.count + 1
    };
    case "dec": return{ // If the action type is "dec", return a new state object with count decremented by 1
      count : state.count - 1
    };
    default: throw new Error(); // If the action type is not recognized, throw an error
  };
}

const App = () => { // Defining the App component
  const [state, dispatch] = useReducer(reducer, inintialState); // Using the useReducer hook to manage state with the reducer function and initial state
  return ( // Returning the JSX to render the component
    <div>
      <h2>Count: {state.count}</h2> {/* Displaying the current count from the state */}
      <button onClick={()=>dispatch({type: "inc"})}>Increment</button> {/* Dispatching an "inc" action when the button is clicked */}
      <button onClick={()=>dispatch({type: "dec"})}>Decrement</button> {/* Dispatching a "dec" action when the button is clicked */}
    </div>
  )
}

export default App // Exporting the App component as the default export

2) Example: - here we fetch the data using the reducer

import axios from 'axios';
import React, { useReducer } from 'react'

const inintialState = {
  data: [],
  loading: false,
  error: null
}


const reducer = (state, action) =>{
  switch(action.type){
    case "pending": return{
      ...state,
      loading: true,
      error: null
    };
    case "fulfilled": return{
      ...state,
      loading: false,
      data: action.payload
    };
    case "rejected": return{
      ...state,
      loading: false,
      error: action.payload
    };
    default: return state;
  };
}


const App = () => {
  const [state, dispatch] = useReducer(reducer, inintialState);
  
const fetchData = async() => {
  dispatch({type: "pending"});
  try {
    const response = await axios.get("https://jsonplaceholder.typicode.com/pots");
    dispatch({type: "fulfilled", payload: response.data});
  } catch (error) {
    dispatch({type: "rejected", payload: error.message});
  }
}
  return (
    <div>
      <h2>Fetch Data</h2>
      <button onClick={fetchData}>Fetch Data</button>
      {state.loading ? <p>Loading...</p> : state.error ? <p>{state.error}</p> : <pre>{JSON.stringify(state.data, null, 2)}</pre>}
    </div>
  )
}

export default App
